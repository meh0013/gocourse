package intermediate

import "fmt"

func main() {

	fmt.Println(factorial(5))
	fmt.Println(factorial(10))
	fmt.Println(factorial(25))

	fmt.Println(sumOfDigits(9))
	fmt.Println(sumOfDigits(12))
	fmt.Println(sumOfDigits(12345))

	for i := range 10 {
		fmt.Printf("%d ", fibonacci(i))
	}

}

func factorial(n int) int {
	//Base case: factorial of 0 is 1
	if n == 0 {
		return 1
	}

	//Recursive case: factorial of n is n * factorial of (n-1)
	return n * factorial(n-1)
	//n*(n-1)*(n-2)*factorial(n-3)...
}

func sumOfDigits(n int) int {
	//base case
	if n < 10 {
		return n
	}

	return n%10 + sumOfDigits(n/10)
}

func fibonacci(n int) int {
	//base case
	if n < 2 {
		return n
	}

	return fibonacci(n-1) + fibonacci(n-2)
}

//Recursion

//Practical Use Case
// -> Mathematical Algorithms
// -> Tree and Graph traversal
// -> Divide and Conquer algos

//Benefits of Recursion
// -> Simplicity
// -> Clarity
// -> Flexibility

//Considerations
// -> Performance
// -> Base Case

//Best Practices
// -> Testing
// -> Optimisation
// -> Recursive Case

//Memoisation is caching results of expensive function calls, used to optimise recursion