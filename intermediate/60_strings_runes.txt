package intermediate

import (
	"fmt"
	"unicode/utf8"
)

func main() {

	message := "Hello, \nGo!"
	message1 := "Hello, \tGo!"
	message2 := "Hello, \rGo!"
	rawMessage := `Hello\nGo`

	fmt.Println(message)
	fmt.Println(message1)
	fmt.Println(message2)
	fmt.Println(rawMessage)

	fmt.Println("Length of message variable is: ", len(message))
	fmt.Println("Length of message1 variable is: ", len(message1))
	fmt.Println("Length of message2 variable is: ", len(message2))
	fmt.Println("Length of rawMessage variable is: ", len(rawMessage))

	fmt.Println("The first character in message var is: ", message[0]) //ASCII

	greeting := "Hello "
	name := "Alice"
	fmt.Println(greeting + name)

	str1 := "Apple"
	str := "apple"
	str2 := "banana"
	str3 := "app"

	fmt.Println(str1 < str2)
	fmt.Println(str3 < str1)
	fmt.Println(str > str1)
	fmt.Println(str > str3)

	for _, char := range message {
		// fmt.Printf("Character at index %d is %c\n", i, char)
		fmt.Printf("%v\n", char)
	}

	fmt.Println("Rune count: ", utf8.RuneCountInString(greeting))

	greetingWithName := greeting + name
	fmt.Println(greetingWithName)

	var ch rune = 'a'
	jch := 'ロ'
	fmt.Println(ch)
	fmt.Println(jch)

	fmt.Printf("%c\n", ch)
	fmt.Printf("%c\n", jch)

	cstr := string(ch)
	fmt.Println(cstr)

	fmt.Printf("Type of cstr is %T\n", cstr)

	const NIHONGO = "森林浴" //jp text
	fmt.Println(NIHONGO)

	jhello := "こんにちは" //jp "Hello"

	for _, runeValue := range jhello {
		fmt.Printf("%c\n", runeValue)
		fmt.Printf("%v\n", runeValue)
	}

	r := '😊'
	fmt.Printf("%c\n", r)
	fmt.Printf("%v\n", r)
}

//Strings and Runes
//Runes and Characters
// -> Similarities; Char. representation, storage size
// -> Differences; unicode support, type and size, encoding and handling
//Practical Considerations: Internationalisation, Portability, Efficiency
