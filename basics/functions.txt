package basics

import "fmt"

func main() {

	//func <name>(parameters list) returnType{
	//code block
	//return value }

	sum := add(1, 2)
	fmt.Println(sum)

	//anonymous functions

	// func() {
	// 	fmt.Println("Hello Anonymous Function")
	// }()

	greet := func() {
		fmt.Println("Hello Anonymous Function")
	}
	greet()

	// operation := add
	// result := operation(3, 5)
	// fmt.Println(result)

	//First class citizens - entities that have no restrictions on their use and can be treated uniformly throughout the language, can perform a wide range of operations on it just like data type -> passing as arguments, returning from func, assigning to variables or storing in data structures

	//Functions are a first class citizen in the Go language

	//Passing a func as an argument
	result := applyOperation(5, 3, add)
	fmt.Println("5+3 = ", result)

	//Returning and using a func
	multiplyBy2 := createMultiplier(2)
	fmt.Println("6*2= ", multiplyBy2(6))
}

func add(a, b int) int {
	return a + b
}

// Function that takes a function as an argument
func applyOperation(x int, y int, operation func(int, int) int) int {
	return operation(x, y)
}

// Func that returns a func
func createMultiplier(factor int) func(int) int {
	return func(x int) int {
		return x * factor
	}
}
