package advanced

import (
	"fmt"
	"time"
)

func main(){
	timer1:=time.newTimer(1*time.Second)
	timer2:=time.newTimer(2*time.Second)

	select{
		case <-timer1.C:
			fmt.Println("Timer1 expired.")
		case <-timer2.C:
			fmt.Println("Timer2 expired.")
	}

}




// ================= SCHEDULING DELAYED OPERATIONS ================
func main() {

	timer := time.NewTimer(2 * time.Second) //non-blocking timer starts
	go func() {
		<-timer.C
		fmt.Println("Delayed operation executed")
	}() //leaves the main thread

	fmt.Println("Waiting...")
	time.Sleep(3 * time.Second) //blocking timer starts
	fmt.Println("End of the program")
}

// ====================== TIMEOUT =========================

// func longRunningOperation() {
// 	for i := range 20 {
// 		fmt.Println(i)
// 		time.Sleep(time.Second)
// 	}
// }

// func main() {
// 	timeout := time.After(3 * time.Second)
// 	done := make(chan bool)

// 	go func() {
// 		longRunningOperation()
// 		done <- true
// 	}()
// 	select {
// 	case <-timeout:
// 		fmt.Println("operation times out")
// 	case <-done:
// 		fmt.Println("Operation completed.")

// 	}
// }

// ========================== BASIC TIMER USE ===============
// func main() {

// 	fmt.Println("Starting app.")
// 	timer := time.NewTimer(2 * time.Second) //non-blocking in nature
// 	fmt.Println("Waiting for timer.c")
// 	<-timer.C // blocking in nature
// 	//The C field of the timer type is a channel that receives the time when the timer expires(after 2 seconds, according to our condition)
// 	fmt.Println("Timer expired.")
// }

//Why? Timeouts, delays, periodic tasks.
//The time.Timer type: creating a timer, timer channel, stopping a timer.

//A timer in go allows you to schedule an event to occur after a specified duration.
//Useful for impletementing timeouts, scheduling period tasks and delaying operations.
//We can implement timeout functionality to limit how long a particular operation should wait.
//Another reason is to use delays in schedule operations to occur after a certain delay.
//Define periodic tasks.

//Best practices: Always stop timers to avoid resource leaks, combine with channels, use time.After for simple timeouts.
//Practical cases: Implementing timeouts, scheduling delayed operations, period tasks, handle large numbers of goroutines, use 'defer' for unlocking
